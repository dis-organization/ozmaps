## read all files and bind together in one object
## (I find problems using map_df so I just avoid it
## and ensure sf is attached)
read_psma <- function(x, keep = 1) {
library(sf)
do.call(rbind, purrr::map(x, sf::read_sf))
}
## @knitr build-electoral
# ## electoral (140Mb)
elec <- read_psma(fs %>% dplyr::filter(grepl("STATE_ELECTORAL_POLYGON", file)) %>% dplyr::pull(fullname))
x <- elec[1:4, ]
class(elec)
pryr::object_size(x, x)
pryr::object_size(x)
pryr::object_size(x*2)
pryr::object_size(x$geometry*2)
g <- geojsonio::geojson_json(x)
pryr::object_size(g)
tj <- geojsonio::geo2topo(g)
pryr::object_size(tj)
x <- elec[1:4, ]
g <- geojsonio::geojson_json(x)
tj <- geojsonio::geo2topo(g)
pryr::object_size(x)
pryr::object_size(g)
pryr::object_size(tj)
x <- elec[1:1000, ]
g <- geojsonio::geojson_json(x)
tj <- geojsonio::geo2topo(g)
pryr::object_size(x)
pryr::object_size(g)
pryr::object_size(tj)
usethis::use_data(x)
usethis::use_data(g)
usethis::use_data(tj)
electoral <- rmapshaper::ms_simplify(elec, keep_shapes = TRUE)
pryr::object_size(electoral)
dim(electoral)
dim(elec)
electoral0 <- electoral
electoral <- geojsonio::geo2topo(electoral0[1, ])
electoral <- geojsonio::geo2topo(geojsonio::geo2topo(electoral0))
electoral <- geojsonio::geo2topo(geojsonio::geojson_json(electoral0))
pryr::object_size(electoral)
pryr::object_size(electoral0)
usethis::use_data(electoral0)
usethis::use_data(electoral)
library(ozmaps)
x <- ozmap_data("electoral")
class(electoral)
geojsonio::geojson_sp
geojsonio::geojson_sp.json
geojsonio:::geojson_sp.json
geojsonio:::tosp
gjson <- geojsonio::geojson_json(electoral)
geojsonio::geojson_write(electoral)
tfile <- "myfile.geojson"
out <- sf::st_as_sf(geojsonio::geojson_sp(tfile))
?geojsonio::geojson_sp
out <- sf::st_as_sf(geojsonio::geojson_sp(geojsonio::geojson_read(tfile)))
library(ozmaps)
devtools::install_github("hypertidy/silicate@pslg")
library(silicate)
x <- silicate:::sc_compact(SC(electoral0[1, ]))
x <- silicate:::sc_compact.SC(SC(electoral0[1, ]))
x
pryr::object_size(electoral0[1:100, ])
x <- silicate:::sc_compact.SC(SC(electoral0[1:100, ]))
pryr::object_size(x)
x <- silicate:::sc_compact.SC(SC(electoral0[1:1000, ]))
pryr::object_size(x)
pryr::object_size(electoral0[1:1000, ])
x <- silicate:::sc_compact.SC(SC(electoral0))
pryr::object_size(x)
pryr::object_size(electoral0)
devtools::use_data(x)
devtools::use_data(electoral0)
usethis::create_package("ozmaps.data")
usethis::create_package("../ozmaps.data")
usethis::create_package("../ozmapsdata")
install.packages("usethis")
devtools::install_github("r-lib/usethis")
usethis::create_package("../ozmaps.data")
library(ozmaps)
ozmaps::electoral
devtools::load_all(".")
class(electoral)
str(electoral)
devtools::load_all(".")
class(electoral)
names(electoral)
class(unclass(electoral))
length(unclass(electoral))
nchar(unclass(electoral))
x <- sf::st_as_sf(geojsonio::geojson_sp(electoral))
x <- sf::st_as_sf(geojsonio::geojson_sp(topo2geo(electoral)))
x <- sf::st_as_sf(geojsonio::geojson_sp(geojsonio::topo2geo(electoral)))
class(x)
dim
library(silicate)
library(sf)
example(st_read)
plot(nc[1:2, 1])
plot(rmapshaper::ms_simplify(nc[1:2, 1]))
graphics.off()
plot(rmapshaper::ms_simplify(nc[1:2, 1]))
library(ozmaps)
x <- country[1, ]
x <- ozmaps::ozmap_country()[1, ]
x <- ozmaps::ozmap_data("country")[1, ]
plot(x)
x <- ozmaps::ozmap_data("state")[1, ]
plot(x)
x <- ozmaps::ozmap_data("state")[2, ]
plot(x)
x <- ozmaps::ozmap_data("state")[3, ]
plot(x)
x <- ozmaps::ozmap_data("state")[4, ]
plot(x)
x <- ozmaps::ozmap_data("state")[5, ]
plot(x)
x <- ozmaps::ozmap_data("state")[6, ]
plot(x)
plot(rmapshaper::ms_simplify(x))
p <- silicate::PATH(x)
arc <- sc_arc(p)
arc
split(arc, arc$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
library(dplyr)
split(arc, arc$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
split(arc, arc$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(3, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
arc
arc %>% group_by(arc_) %>% sub_group()
a1 <- arc %>% group_by(arc_) %>% sub_group()
plot(p$vertex[c("x_", "y_")], pch = "")
split(a1, .$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
a1
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
sub_group <- function(x, prop = 0.5, ...) {
n <- max(c(3, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
plot(x$geometry, add = T)
x <- ozmaps::ozmap_data("state")
plot(rmapshaper::ms_simplify(x))
p <- silicate::PATH(x)
arc <- sc_arc(p)
arc
library(dplyr)
sub_group <- function(x, prop = 0.5, ...) {
n <- max(c(3, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex) %>% select(x_, y_)))
sub_group <- function(x, prop = 0.1, ...) {
n <- max(c(3, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
n <- max(c(5, nrow(x) * prop))
sub_group <- function(x, prop = 0.1, ...) {
n <- max(c(5, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.2, ...) {
n <- max(c(5, nrow(x) * prop))
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% group_by(arc_) %>% sub_group() %>% ungroup()
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group) %>% ungroup()
arc %>% #group_by(arc_) %>%
split(.$arc_)
sub_group <- function(x, prop = 0.2, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.5, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc
a1
sub_group <- function(x, prop = 0.1, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::map(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
x
x <- ozmaps::ozmap_data("state")[c(6, 8), ]
plot(rmapshaper::ms_simplify(x))
p <- silicate::PATH(x)
arc <- sc_arc(p)
arc
library(dplyr)
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>% #group_by(arc_) %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc %>% split(.$arc_) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc %>% group_by(arc_)
arc %>% split(.$arc_)[1] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc %>% split(.$arc_) %>% purrr::pluck(1) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
f <- function(x, i) x[i]
arc %>% split(.$arc_) %>% f(1) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_) %>% f(1) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_) %>% f(2) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
par(mfrow = c(3, 3))
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_) %>% f(1) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc %>% split(.$arc_) %>% f(i) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
for (i in 1:8) {
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_) %>% f(i) %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
}
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
graphics.off()
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arc %>% split(.$arc_)
arc %>% split(.$arc_) %>% cross()
arc %>% split(.$arc_) %>% purrr::cross()
?cross
cross(seq_along(1:8))
library(purrr)
cross(seq_along(1:8))
combn(1:8, 2)
?combn
combn(1:8, 2, simplify = FALSE)
x
arclist <- arc %>% split(.$arc_)
arclist[[1]] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arclist[1] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
plot(p$vertex[c("x_", "y_")], pch = "")
arclist[2] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arclist[3] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
plot(p$vertex[c("x_", "y_")], pch = "")
arclist[5] %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
arclist[[3]]
arclist[[5]]
arclist[[5]] %>% slice(nrow(arclist[[5]]):1)
arclist[[3]]
arclist[[3]]$vertex_ == arclist[[5]]$vertex_
arclist[[3]]$vertex_ == rev(arclist[[5]]$vertex_)
all(arclist[[3]]$vertex_ == rev(arclist[[5]]$vertex_))
hash <- purrr::map(arclist, function(x) paste(sort(x$vertex_), collapse = ""))
length(hash)
length(unique(hash))
library(silicate)
library(ozmaps)
x <- ozmaps::ozmap_data("state")
plot(rmapshaper::ms_simplify(x))
p <- silicate::PATH(x)
arc <- sc_arc(p)
arc
library(dplyr)
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
dps
sub_group <- function(x, prop = 0.01, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
arc %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((arc %>%
split(.$arc_))[!dps])
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.005)
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((arc %>%
split(.$arc_))[!dps])
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.05)
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((a1 %>%
split(.$arc_))[!dps])
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.001)
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((a1 %>%
split(.$arc_))[!dps])
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- arc %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.05)
dps <- duplicated(a1 %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((a1 %>%
split(.$arc_))[!dps])
plot(p$vertex[c("x_", "y_")], pch = "")
dps <- duplicated(arc %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((arc %>%
split(.$arc_))[!dps])
a1 <- a1 %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.05)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- a1 %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.01)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
a1 <- a1 %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.05)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
sub_group <- function(x, prop = 0.05, ...) {
n <- max(c(5, nrow(x) * prop))
if (n > (nrow(x)-2)) return(x)
idx <- sort(sample(seq(2, nrow(x) - 1), n))
dplyr::slice(x, c(1, idx, nrow(x)))
}
dps <- duplicated(arc %>% split(.$arc_) %>% purrr::map_chr(~paste(sort(.x$vertex_), collapse = "")))
a1 <- bind_rows((arc %>%
split(.$arc_))[!dps])
a1 <- a1 %>%
split(.$arc_) %>%
purrr::map_df(sub_group, prop = 0.05)
plot(p$vertex[c("x_", "y_")], pch = "")
a1 %>% split(.$arc_)  %>% purrr::walk(~lines(inner_join(.x, p$vertex, "vertex_") %>% select(x_, y_)))
library(raster)
library(mapview)
im<- raster(nrows=7,ncols=2,xmn=-75.7,xmx=-66.55,ymn=-50,ymx=-17.5,
crs=crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
im[]<- seq(1,length.out=14,by=100)
im[c(1,6,9,12)] <- NA
mapview(im)
#same with polygons
mapview(rasterToPolygons(im))
#with leaflet
leaflet() %>% addTiles() %>% addRasterImage(im)
im
plot(im)
mapview(im)
library(ozmaps)
elect_map
load("~/Git/ozmaps/data/elect_map.Rda")
elect_map
library(spbabel)
x <- sp(elect_map %>% transmute(object_ = id, x_ = long, y_ = lat, order_ = order, island_ = !hole, branch_ = group))
library(dplyr)
x <- sp(elect_map %>% transmute(object_ = id, x_ = long, y_ = lat, order_ = order, island_ = !hole, branch_ = group))
plot(x)
library(sp)
plot(x)
class(x)
library(raster)
y <- select(x)
plot(y)
y <- select(y)
plot(y)
y <- select(y)
plot(y)
library(anglr)
x <- copy_down(y, gebco1)
x <- copy_down(DEL(y), gebco1)
plot3d(x)
rgl::rglwidget()
x
rgl::aspect3d(1, 1, 0.1)
rgl::rglwidget()
x <- copy_down(DEL(y), gebco1, max_area = 0.01)
x <- copy_down(DEL(y, max_area = 0.01), gebco1)
plot3d(x)
rgl::rglwidget()
x <- copy_down(DEL(y, max_area = 0.001), gebco1)
plot3d(x)
rgl::rglwidget()
